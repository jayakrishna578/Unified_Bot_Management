Project Description: 
Title: Unified Bot Management Streamlit App
Summary
The Unified Bot Management Streamlit App is designed to provide a one-stop solution for managing multiple chatbots. The app allows users to create, customize, and interact with multiple chatbots based on the GPT-3.5 and GPT-4 models. Additionally, the application keeps track of key metrics, including cost and token usage, and offers a feature-rich chat history interface.
Introduction
Managing multiple bots can be challenging for developers and organizations, especially when it comes to version control, customization, and analytics. This Streamlit App aims to simplify these complexities, offering an easy-to-use UI for bot creation and management. The app enables real-time chat, seamless context sharing between conversations, and a transparent cost and token tracking system.
Features
Bot Creation through UI
Options:
Name: Unique identifier for each bot.
Model: Choose between GPT-4 and GPT-3.5.
Context Prompt: Customize the bot's initial state.
Temperature: Control the randomness of bot responses.
Documents to Query: Attach additional knowledge bases for the bot.
Example: Suppose you're a healthcare startup that needs a bot to answer queries on medical imaging. You can create a bot named "RadiologyExpert", set it to GPT-4, and load it with relevant medical journals.
Bot Dashboard
A centralized hub showing all bots.
Easy navigation to choose and interact with a specific bot.
Chat History
Chat history is stored in the web browser to facilitate ongoing conversations.
Option to clear chat history.
Context Management
Each bot maintains its context, allowing for coherent, ongoing dialogues.
Resource Metrics
Display the number of tokens used and the cost associated with each conversation.
Reference:-LlamaIndex Chat

For Fast track Students:- 

Stock Data Retrieval Bot:
Develop a bot to fetch the top 10 stocks with the most significant gains and losses from the previous trading day.
Utilize the guardrails framework for the bot's architecture.
The bot doesn't have to be conversational; a querying mechanism is sufficient.
Store the fetched data in a database of your choice.
Query Bot for Stock Data:
Build a secondary bot designed to query the database populated by the first bot.
This will allow you to easily access information about the top-performing and underperforming stocks.

Reference: NASDAQ Stock Market Activity

* RBAC will be an add on 
