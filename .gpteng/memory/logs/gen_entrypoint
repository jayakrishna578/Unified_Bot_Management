[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nThe project will be implemented using Python, Streamlit for the web interface, OpenAI's GPT-3 and GPT-4 for the chatbots, and SQLite for the database. The project will be structured as follows:\n\n- `main.py`: This is the entry point of the application. It will contain the Streamlit interface and the logic to manage the chatbots.\n- `bot.py`: This file will contain the `Bot` class, which will be used to create and manage individual chatbots.\n- `database.py`: This file will contain the `Database` class, which will be used to interact with the SQLite database.\n- `stock_data_retrieval_bot.py`: This file will contain the `StockDataRetrievalBot` class, which will be used to fetch stock data.\n- `query_bot.py`: This file will contain the `QueryBot` class, which will be used to query the database for stock data.\n\nThe `requirements.txt` file will contain the list of Python packages required for the project.\n\nLet's start with the `requirements.txt` file:\n\nrequirements.txt\n```\nstreamlit\nopenai\nsqlite3\npandas\n```\n\nNow, let's move on to the `bot.py` file:\n\nbot.py\n```python\nimport openai\n\nclass Bot:\n    def __init__(self, name, model, context_prompt, temperature, documents_to_query):\n        self.name = name\n        self.model = model\n        self.context_prompt = context_prompt\n        self.temperature = temperature\n        self.documents_to_query = documents_to_query\n\n    def chat(self, message):\n        response = openai.ChatCompletion.create(\n            model=self.model,\n            messages=[\n                {\"role\": \"system\", \"content\": self.context_prompt},\n                {\"role\": \"user\", \"content\": message},\n            ],\n            temperature=self.temperature,\n        )\n        return response.choices[0].message['content']\n```\n\nNext, the `database.py` file:\n\ndatabase.py\n```python\nimport sqlite3\n\nclass Database:\n    def __init__(self, db_name):\n        self.conn = sqlite3.connect(db_name)\n        self.cursor = self.conn.cursor()\n\n    def create_table(self, table_name, columns):\n        self.cursor.execute(f\"CREATE TABLE IF NOT EXISTS {table_name} ({columns})\")\n        self.conn.commit()\n\n    def insert_data(self, table_name, columns, data):\n        self.cursor.execute(f\"INSERT INTO {table_name} ({columns}) VALUES ({data})\")\n        self.conn.commit()\n\n    def query_data(self, table_name, columns):\n        self.cursor.execute(f\"SELECT {columns} FROM {table_name}\")\n        return self.cursor.fetchall()\n```\n\nNext, the `stock_data_retrieval_bot.py` file:\n\nstock_data_retrieval_bot.py\n```python\nimport pandas as pd\nfrom bot import Bot\n\nclass StockDataRetrievalBot(Bot):\n    def __init__(self, name, model, context_prompt, temperature, documents_to_query):\n        super().__init__(name, model, context_prompt, temperature, documents_to_query)\n\n    def fetch_stock_data(self):\n        # Fetch stock data using pandas\n        # This is a placeholder and should be replaced with actual code to fetch stock data\n        stock_data = pd.DataFrame()\n        return stock_data\n```\n\nNext, the `query_bot.py` file:\n\nquery_bot.py\n```python\nfrom bot import Bot\nfrom database import Database\n\nclass QueryBot(Bot):\n    def __init__(self, name, model, context_prompt, temperature, documents_to_query, db_name):\n        super().__init__(name, model, context_prompt, temperature, documents_to_query)\n        self.db = Database(db_name)\n\n    def query_stock_data(self, table_name, columns):\n        return self.db.query_data(table_name, columns)\n```\n\nFinally, the `main.py` file:\n\nmain.py\n```python\nimport streamlit as st\nfrom bot import Bot\nfrom stock_data_retrieval_bot import StockDataRetrievalBot\nfrom query_bot import QueryBot\n\n# Create bots\nradiology_expert = Bot(\"RadiologyExpert\", \"gpt-4\", \"You are a radiology expert.\", 0.5, [])\nstock_data_retrieval_bot = StockDataRetrievalBot(\"StockDataRetrievalBot\", \"gpt-3.5\", \"You fetch stock data.\", 0.5, [])\nquery_bot = QueryBot(\"QueryBot\", \"gpt-3.5\", \"You query stock data.\", 0.5, [], \"stock_data.db\")\n\n# Streamlit interface\nst.title(\"Unified Bot Management Streamlit App\")\nbot_name = st.selectbox(\"Select a bot\", [\"RadiologyExpert\", \"StockDataRetrievalBot\", \"QueryBot\"])\nmessage = st.text_input(\"Enter a message\")\n\nif st.button(\"Send\"):\n    if bot_name == \"RadiologyExpert\":\n        response = radiology_expert.chat(message)\n    elif bot_name == \"StockDataRetrievalBot\":\n        response = stock_data_retrieval_bot.fetch_stock_data()\n    elif bot_name == \"QueryBot\":\n        response = query_bot.query_stock_data(\"stock_data\", \"*\")\n    st.write(response)\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "```bash\npython3 -m venv env\nsource env/bin/activate\npip install -r requirements.txt\n```\n\n```bash\nstreamlit run main.py &\npython bot.py &\npython database.py &\npython stock_data_retrieval_bot.py &\npython query_bot.py &\n```", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]